#!/bin/sh

exit_trap() { show_info "$1"; exit $2; }
trap_fail() { trap 'exit_trap "$0: execution failed." 1' EXIT; set -e; }
exit_succ() {
  if test -n "$SILENT_EXIT";then trap - EXIT
  else trap 'exit_trap "$0: Success." 0' EXIT; fi
}

grub_cfg_gfx() {
  local ldn="$1" wd="$2" d
  shift 2
  for d in "$@";do
    if test -e "$d/font.pf2" -a -e "$d/logo.png";then
      mkdir -p "$wd/$ldn"
      cp -vt "$wd/$ldn" "$d/font.pf2" "$d/logo.png" >&2
      cat <<EOF
insmod font
if loadfont /$ldn/font.pf2;then
  insmod vbe
  insmod gfxterm
  set gfxmode=800x600x16
  if terminal_output gfxterm;then
    insmod png
    background_image -m stretch /$ldn/logo.png
  fi
fi
EOF
      break
    fi
  done
}

grub_cfg_entry() {
  local ldn="$1" name="$2" livedev="$3" vmlinuz="$4" ramdisk="$5" storage="$6" arch_sfs parts
  shift 6 || { echo "Usage: $FUNCNAME livedirname entry_name live_dev vmlinuz initrd storage [parts]" >&2 ; return 1; }
  while test -n "$1";do
    parts="$parts:$ldn/$1.sfs+"
    shift
  done
  test -n "$parts" || {
    parts=":$ldn/*.sfs+"
    case "$vmlinuz" in */*) arch_sfs=":$ldn/${vmlinuz%/*}/*.sfs+" ;; esac
  }
  cat <<EOF
menuentry "$name" {
 linux /$ldn/$vmlinuz root=$livedev$parts$arch_sfs$storage quiet max_loop=64
 initrd /$ldn/$ramdisk
}
EOF
}

grub_cfg_allentries() {
  local ldn="$1" tgt="$2" livedev="$3" storage_dev="$4" vmlinuz="vmlinuz-`uname -r`" initrd="ramdisk-`uname -r`" arch
  test -n "$ldn" -a -n "$tgt" -a -n "$livedev" || {
    echo "Usage: $FUNCNAME <ldn> <tgt_mnt> <livedev> [<storage_dev>]" >&2
    return 1
  }
  if test -e "$tgt/$ldn/`uname -m`";then
    for vm_arch in "$tgt/$ldn"/*/"$vmlinuz";do
      arch="${vm_arch%/*}"
      arch="${arch##*/}"
      test -z "$storage_dev" ||
        grub_cfg_entry "$ldn" "Boot $livedev [$arch/$storage_dev]" "$livedev" "$arch/$vmlinuz" "$arch/$initrd" "$storage_dev"
      grub_cfg_entry "$ldn" "Boot $livedev [$arch/mem]" "$livedev" "$arch/$vmlinuz" "$arch/$initrd" mem
      grub_cfg_entry "$ldn" "Boot $livedev [$arch/noextra]"  "$livedev" "$arch/$vmlinuz" "$arch/$initrd" mem root home $arch/kernel-`uname -r`
    
    done
  elif test -e "$tgt/vmlinuz-`uname -r`";then
    test -z "$storage_dev" ||
      grub_cfg_entry "$ldn" "Boot $livedev [$storage_dev]" "$livedev" "$vmlinuz" "$initrd" mem
    grub_cfg_entry "$ldn" "Boot $livedev [mem]" "$livedev" "$vmlinuz" "$initrd" mem
    grub_cfg_entry "$ldn" "Boot $livedev [noextra]" "$livedev" "$vmlinuz" "$initrd" mem root home kernel-`uname -r`
  else
    echo "Cannot find $vmlinuz"
  fi
}

MKRD_D="${MKRD_D:-/usr/src/make-ramdisk}"
make_ramdisk() {
  test "x$1" = "x-o" || {
    echo "Usage: $FUNCNAME -o <outfile> [<make args>]" >&2
    echo "  example make args: KVERS=`uname -r`" >&2
    return 1
  }
  local outfile="$2"
  shift 2
  test -d "$MKRD_D" || git clone git://github.com/SFSLiveBoot/make-ramdisk.git "$MKRD_D"
  make -C "$MKRD_D" RAMDISK="$outfile" "$@"
}

sfs_stamp_file() {
  if test -e "$1" && stamp="$(unsquashfs -s "$1" | grep time | cut -f7- -d" ")";then
    date -d "$stamp" +%s
  else
   ret=1
  fi
}

as_root() {
  if test "$(id -u)" = 0;then "$@"
  else sudo "$@"
  fi
}

sfs_stamp() {
  local stamp dl_tmp ret
  case "$1" in
    http://*|https://*|ftp://*)
      dl_tmp="$(mktemp)"
      if curl -f -s -r 0-1024 -o "$dl_tmp" "$1";then
        sfs_stamp_file "$dl_tmp"
        ret="$?"
      else ret=1;fi
      rm "$dl_tmp"
    ;;
    *) sfs_stamp_file "$1" ;;
  esac
  return $ret
}

required_debpkg() {
  local apt_output exit_st
  if apt_output="$(apt-get ${dpkg_status:+-o Dir::State::status="$dpkg_status" }${target_dist:+-t $target_dist }install -s "$@")"; then
    echo "$apt_output" | grep '^Inst' | sed -re 's/^Inst ([^ ]+)( \[[^]]+\])? \(([^ ]+) .*/\1=\3/'
  else
   exit_st="$?"
   echo "$apt_output" >&2
   return $exit_st
  fi
}

unpack_deb() {
  local dst_dir="$1" deb_file pkg_name ctrl_tmp info_dir="${info_dir:-$1/var/lib/dpkg/info}" 
  local div_src div_dst div_pkg dpkg_diversions="${dpkg_diversions:-/var/lib/dpkg/diversions}"
  test -d "$dst_dir" || { echo "Usage: unpack_deb <dest_dir> [<deb_files..>]" >&2; return 1; }
  shift
  test -d "$info_dir" || mkdir -p "$info_dir"
  for deb_file;do
    dpkg-deb -x "$deb_file" "$dst_dir"
    while read div_src; do
      read div_dst
      read div_pkg
      test -e "$dst_dir/$div_src" -o -L "$dst_dir/$div_src" || continue
      echo "Diverting for $div_pkg: $div_src -> $div_dst" >&2
      mkdir -p "$dst_dir/${div_dst%/*}"
      mv "$dst_dir/$div_src" "$dst_dir/$div_dst"
    done < "$dpkg_diversions"
    pkg_name="$(dpkg-deb -f "$deb_file" Package)"
    test ! "x$(dpkg-deb -f "$deb_file" Multi-Arch)" = "xsame" ||
      pkg_name="$pkg_name:$(dpkg-deb -f "$deb_file" Architecture)"

    dpkg-deb --fsys-tarfile "$deb_file" | tar t | sed -e 's@^./@/@' -e 's@^/$@/.@' -e 's@/$@@' >"$info_dir/${pkg_name}.list"
    ctrl_tmp="$(mktemp -d)"
    dpkg-deb -e "$deb_file" "$ctrl_tmp"
    for f in "$ctrl_tmp"/*;do
      mv "$f" "$info_dir/$pkg_name.${f##*/}"
    done
    rmdir "$ctrl_tmp"
  done
}

copy_related_files() {
  local cp_cmd="copy_verbose" dst f arch="`uname -m`" kver="`uname -r`" d_kern f_kern d_arch d_sup f2 d_arch2
  test "x$1" != "x-cmd" || { cp_cmd="$2" ; shift 2 ; }
  test "x$1" != "x-arch" || { arch="$2" ; shift 2; }
  dst="$1" f="$2"
  test -n "$dst" || { echo "Usage: $FUNCNAME <dirname=$dst> <filename=$f>" >&2; return 1; }
  mkdir -p "$dst"
  case "$f" in *.sfs.[0-9]*) f="${f%.sfs.[0-9]*}.sfs";;esac
  case "$f" in
    */$arch/*.sfs)
      d_arch="${f%/*}"
      for f2 in "${d_arch%/*}"/*/"${f##*/}";do
        d_arch2="${f2%/*}"
        copy_related_files -cmd "$cp_cmd" -arch "nullARCH" "$dst/${d_arch2##*/}" "$f2"
      done
    ;;
    *.sfs) 
      f2="$dst/${f##*/}"
      if test -e "$f2";then
        if test "$(sfs_stamp "$f2")" -ge "$(sfs_stamp "$f")";then echo "${f##*/} is already up to date">&2;else $cp_cmd "$dst" "$f"; fi
      else $cp_cmd "$dst" "$f";fi;;
    *) $cp_cmd "$dst" "$f";;
  esac
  case "$f" in 
    */kernel-$kver.sfs)
      case "$f" in
        */$arch/*.sfs) ;;
        *)
          d_kern="${f%/*}"
          for f_name in vmlinuz-$kver ramdisk-$kver ramdisk_net-$kver;do
            test ! -e "$d_kern/$f_name" || $cp_cmd "$dst" "$d_kern/$f_name"
          done
        ;;
      esac
    ;;
  esac
}

is_up_to_date() {
  local dst="$1" f="$2" msg="$3"
  test ! -d "$dst" || dst="$dst/${f##*/}"
  test -f "$dst" || return 1
  case "$f" in
    *.sfs)
      if test "$(sfs_stamp "$dst")" -lt "$(sfs_stamp "$f")";then
        return 1
      else
        test -z "$msg" || echo "$msg" >&2
        return 0
      fi
    ;;
    *) return 1;;
  esac
}

aufs_si() {
  local si
  if si="$(mnt2dev "$1" 4 | grep -o 'si=[^,[:space:]]\+')";then echo "${si#si=}"
  else return 1;fi
}

aufs_parts() {
  local si="$1"
  test -e "/sys/fs/aufs/si_$si" -o ! -d "$si" || si="$(aufs_si "$1")" || return 1
  find "/sys/fs/aufs/si_$si" -name "br[0-9]*" -exec cat {} + | sed -e 's/=r.$//'
}

aufs_refresh() {
  local mnt="${1:-/}"
  mount -o remount,mod:$(cat /sys/fs/aufs/si_$(aufs_si "$mnt")/br0) "$mnt"
}

aufs_orig() {
  local fname="$(readlink -f "$(dirname "$1")")/$(basename "$1")" part
  for part in $(aufs_parts "$(file2mnt "$fname")");do
    if test -L "$part$fname" -o -e "$part$fname";then echo "$part$fname";fi
  done
}

file2mntinfo() {
  local id=$(stat -c %d "$1")
  grep "^[0-9]\+ [0-9]\+ $(printf "%d:%d" $(($id>>8)) $(($id&0xff)) ) " /proc/self/mountinfo
}

sfs2mnt() {
  local sfs="$1" loop_bf_nfo loop_bf sfs_loop sfs_mnt mnt_count=""
  for loop_bf_nfo in /sys/class/block/loop*/loop/backing_file;do
    read loop_bf <"$loop_bf_nfo"
    test "$sfs" -ef "$loop_bf" || continue
    sfs_loop="${loop_bf_nfo%/loop/backing_file}"
    sfs_mnt="$(grep "^[0-9]\+ [0-9]\+ $(cat $sfs_loop/dev) " /proc/self/mountinfo | cut -f5 -d" " | head -1 | sed -e 's@\\040@ @g')"
    sfs_loop="${sfs_loop#/sys/class/block/}"
    break
  done
  test -z "$sfs_mnt" || { echo "$sfs_mnt"; return 0; }
  sfs_mnt="/.parts/$(basename "${sfs%.sfs*}").$(sfs_stamp "$sfs")"
  while mountpoint -q "$sfs_mnt${mnt_count:+-$mnt_count}";do
    mnt_count="$((${mnt_count:-0}+1))"
  done
  sfs_mnt="$sfs_mnt${mnt_count:+-$mnt_count}"
  mkdir -p "$sfs_mnt"
  if test -n "$sfs_loop";then mount -o ro "$sfs_loop" "$sfs_mnt"
  else mount -o ro,loop "$sfs" "$sfs_mnt"
  fi
  echo "$sfs_mnt"
}

aufs_update_sfs_branch() {
  local branch_dir aufs_mnt branch_loop branch_backfile branch_sfs aufs_si br_dir br_nr br_nfo sfs_mnt
  branch_dir="$(readlink -f "$1")" aufs_mnt="${2:-/}"
  branch_loop="$(file2mntinfo "$branch_dir" | grep -w -o "squashfs /dev/loop[0-9]\+" | cut -f2 -d" " | tail -1)"
  test -n "$branch_loop" || { echo "Error: Cannot get loop dev for '$branch_dir'" >&2; return 1; }
  branch_backfile="$(cat /sys/block/${branch_loop#/dev/}/loop/backing_file)"
  branch_sfs="${branch_backfile%.sfs*}.sfs"
  test -r "$branch_sfs" || { echo "Error: '$branch_sfs' is not readable file." >&2; return 1; }
  test ! "$branch_backfile" -ef "$branch_sfs" || { echo "Skipping: '$branch_sfs' is the backing file." >&2; return 0; }
  sfs_mnt="$(sfs2mnt "$branch_sfs")"
  aufs_si="$(file2mntinfo "$aufs_mnt" | grep -w -o 'si=[0-9a-f]\+' | cut -f2 -d= | tail -1)"
  test -n "$aufs_si" || { echo "Error: Cannot get 'si' for '$aufs_mnt'" >&2; return 1; }
  for br_nfo in /sys/fs/aufs/si_${aufs_si}/br[0-9]*;do
    br_dir=$(cut -f1 -d= "$br_nfo")
    test "$br_dir" = "$branch_dir" || continue
    br_nr="${br_nfo##*/br}"
    echo "Replacing br$br_nr at $branch_dir with $branch_sfs at $sfs_mnt" >&2
    mount -o remount,ins:$br_nr:"$sfs_mnt"=rr aufs "$aufs_mnt"
    echo -n "Trying to unmount $br_dir .. " >&2
    mount -o remount,del:"$br_dir" aufs "$aufs_mnt" && umount "$br_dir" && rmdir "$br_dir" && echo "Ok." >&2 || true
    break
  done
}

file2mnt() {
  local fname="$1" blkid up
  while test -n "$fname";do
    case "$fname" in
      /) echo "/"; return;;
      /*/*) up="${fname%/*}";;
      /*) up="/";;
      *) file2mnt "$(readlink -f "$fname")"; return;;
    esac
    test -n "$blkid" || {
      if test -L "$1" -o -e "$1";then blkid="$(stat -c %d "$1")"
      else blkid="$(stat -c %d "${1%/*}")";fi
    }
    test "$(stat -c %d "$up")" = "$blkid" || {
      echo "$fname"
      break
    }
    fname="$up"
  done
}

file2dev() {
  local fname="$(readlink -f "$1")" mnt si blk
  mnt="$(file2mnt "$fname")"
  if si="$(aufs_si "$mnt")";then
    for part in $(aufs_parts "$si");do
      test ! -e "$part/$fname" || file2dev "$part/$fname"
    done
  else
    blk="$(grep -x -l "$(mountpoint -d "$mnt")" /sys/class/block/*/dev)" || return 1
    blk="${blk%/dev}"
    case "$blk" in
      */loop[0-9]*) cat "$blk/loop/backing_file";;
      *) echo "/dev/${blk##*/}" ;;
    esac
  fi
}

copy_current_sfs() {
  local cp_cmd="copy_verbose" d f arch2 dst
  test "x$1" != "x-s" || { cp_cmd="ln -st" ; shift ; }
  test "x$1" != "x-cmd" || { cp_cmd="$2" ; shift 2 ; }
  dst="$1"
  test -n "$dst" || { echo "Usage: $FUNCNAME [-s] [-cmd <copy_cmd>] <dest_dir>" >&2; return 1; }
  for f in $(cat /sys/block/loop*/loop/backing_file);do
    copy_related_files -cmd "$cp_cmd" "$dst" "$f"
  done
}

copy_verbose() {
  local dst="$1" f s
  shift
  if test -x "$(which bar)";then
    for f in "$@";do
      if test -f "$f";then s="$(stat -Lc %s "$f")";else s="";fi
      bar -ns -if "$f" -of "$dst/${f##*/}" -ti "${f##*/}" ${s:+-s $s}
    done
  else
    cp -vt "$dst" "$@"
  fi
}

blockdev_list() {
  awk  '/^ *[0-9]/{print $4}' /proc/partitions
}

mnt2dev() {
  local esc_name="$(echo -n "$(readlink -f "$1")" | sed -e 's/ /\\\\040/g')" devname pos="${2:-1}"
  devname="$(grep "^[^ ]* $esc_name " /proc/mounts | tail -1 | cut -f$pos -d" ")"
  if test -n "$devname"; then echo "$devname"; else return 1;fi
}

part2disk() {
  local d dev="${1##*/}"
  for d in /sys/block/*;do
    test ! -e "$d/$dev/partition" || { echo "${d##*/}"; return 0; }
  done
  return 1
}

run_as_root() {
  test "$(id -u)" = "0" || exec sudo "$0" "$@"
}

parts_sfslist() {
  local loop_dev parts_list
  if test -z "$1";then parts_list="$(echo /.parts/*)" ; else parts_list="$*";fi
  for loop_dev in $(grep -E "/dev/loop.* ($(echo "$parts_list" | tr ' ' '|')) " /proc/mounts  | cut -f1 -d" ");do
    losetup $loop_dev | grep -o '([^)]*.sfs' | cut -c2-
  done
}

blkid2mnt() {
  local a b c blkid="$1"
  while read a b c;do
    if test -e "$a";then
      test "$blkid" != "$(mountpoint -x "$a")" || { echo "$b" | sed -e 's/\\040/ /g'; return 0; }
    fi
  done < /proc/mounts
  return 1
}

has_part_lbl() {
  local devname="$1" label="$2" d part
  for d in /sys/block/$devname/*/partition;do
    test -e "$d" || break
    part=${d%/partition}
    part=${part##*/}
    if test "x$label" = "x$(blkid -o value -s LABEL /dev/$part)";then
      return 0
    fi
  done
  return 1
}

unmount_below() {
  local mnt="$(readlink -f "$1")" ret=0 d
  echo -n "unmount $1/*: " >&2
  for d in $(cut -f2 -d" " /proc/mounts | tac);do
    d="$(echo "$d" | sed -e 's/\\040/ /g')"
    case "$d" in
      "$mnt"/*) 
        echo -n "${d#$mnt}.. " >&2
        as_root umount "$d" || ret=1
      ;;
    esac
  done
  echo "done." >&2
  return $ret
}

mount_bind() {
  local src="$1" dst="$2"
  test ! -d "$src" -o ! -d "$dst" -o "$src" -ef "$dst" ||
    as_root mount --bind "$src" "$dst"
}

rm_deb_dist() {
  test -n "$DESTDIR" || { echo "Need \$DESTDIR to be set" >&2; return 1; }
  local listfile
  for listfile;do
    tac "$listfile" | xargs sh -c 'for f;do test -L "$DESTDIR/$f" -o ! -d "$f" && rm -v "$DESTDIR/$f" || rmdir -v "$DESTDIR/$f";done' rm.sh
    case "$(readlink -f "$listfile")" in
      "$DESTDIR"/*)
        find "$(dirname "$listfile")" -mindepth 1 -maxdepth 1 -name "$(basename "$listfile" .list).*" -exec rm -v {} +
      ;;
    esac
  done
}

cp2sfs() {
  test -n "$DESTDIR" || { echo "Need to have \$DESTDIR set" >&2; return 1; }
  test -n "$1" || { echo "Usage: $FUNCNAME </path/file/name>.." >&2; return 1; }
  cp --parents -avt "$DESTDIR" "$@"
}

cmpdirs() {
  local dir1="$1" dir2="$2"
  test -d "$dir1" -a -d "$dir2" || { echo "Usage: cmpdirs <dir1> <dir2> [<find_opts..>]" >&2; return 1; }
  shift 2
  env dir2="$dir2" dir1="${dir1%/}" find "$dir1" -not -type d "$@" -exec sh -c 'for f1;do n="${f1#$dir1/}";f2="${dir2%/}/$n"; if test -L "$f1" -o -L "$f2";then test "$(readlink "$f1")" = "$(readlink "$f2")" || echo "$n";else cmp -s "$f1" "$f2" || echo "$n";fi;done' a {} +
}

cmpsfsdst() {
  find "$DESTDIR" -not -type d -not -type l -exec sh -c 'cd "$DESTDIR"; for f;do diff -u "${f#$DESTDIR/}" "/${f#$DESTDIR/}";done' a {} +
}

enter_chroot() {
  local unshare retval=0 mods d x lsof_out
  while true;do
    case "$1" in
      -*) unshare="${unshare:+$unshare }$1"; shift ;;
      *) break;;
    esac
  done
  local dst="$1"
  shift
  test -n "$1" || set -- bash

  mods="/lib/modules/`uname -r`"
  mount_bind "$(find_apt_fullpath Dir::Cache::archives)" "$dst/var/cache/apt/archives"
  mount_bind "$(find_apt_fullpath Dir::State::lists)" "$dst/var/lib/apt/lists"
  for d in /proc /sys /dev/pts /dev/net "$mods" "$(readlink -f "$mods/build")" "$(readlink -f "$mods/source")" "$(readlink -f "$mods/build/scripts/..")"; do
    mount_bind "$d" "$dst$d"
  done

  while true;do
    retval=0
    as_root ${unshare:+unshare $unshare -- } env - $(env | grep -i '^[^=]*_proxy=') debian_chroot="${debian_chroot:-${dst##*/}}" TERM="$TERM" PATH="/sbin:/usr/sbin:$PATH" HOME=/root DISPLAY="$DISPLAY" chroot "$dst" "$@" || retval=1
    lsof_out="$(as_root lsof -w +d "$dst" || true)"
    test -n "$lsof_out" || break
    echo "$lsof_out" >&2
    echo -n "Dangling processes, re-enter [Y/n]? " >&2
    read x || x="n"
    case "$x" in ""|y*|Y*) ;; *) break;; esac
  done
  test -z "$lsof_out" || {
    echo -n "Unmount [y/N]? " >&2
    read x || x="y"
    case "$x" in y*|Y*) lsof_out="";; esac
  }

  test -n "$lsof_out" || unmount_below "$dst" || true
  return $retval
}

mount_auto() {
  local src="$1" mnt="$2"
  if test -f "$src";then
    mount -o loop,ro "$src" "$mnt"
  elif test -d "$src";then
    mount --bind "$src" "$mnt"
    mount -o remount,bind,ro "$src" "$mnt"
  elif test -b "$src";then
    mount -o ro "$src" "$mnt"
  else
    echo "Don't know how to mount '$src'" >&2
    echo "Usage: $FUNCNAME <src> <mnt>" >&2
    return 1
  fi
}

mount_combined() {
  local top="$1" src name dirs
  test -n "$top" || {
    echo "Usage: $FUNCNAME <mnt_top> <parts..>" >&2
    return 1
  }
  shift 1
  mkdir -p "$top/ALL" "$top/RW"
  mount -t tmpfs -o mode=0755 mem "$top/RW"
  for src;do
    name="$(basename "$src" .sfs)"
    mkdir -p "$top/$name"
    mount_auto "$src" "$top/$name"
    dirs="$top/$name=rr${dirs:+:$dirs}"
  done
  dirs="$top/RW=rw${dirs:+:$dirs}"
  mount -t aufs -o "dirs=$dirs" all-combined "$top/ALL"
}

replace_sfs() {
  local src="$1" dst="$2" uid gid mode new_tgt
  test ! -d "$dst" || { dst="$dst/${src##*/}"; dst="${dst%.sfs*}.sfs" ; }
  if test -e "$dst";then
    local src_stamp="$(sfs_stamp "$src")" dst_stamp="$(sfs_stamp "$dst")"
    local src_dtime="$(date --date=@$src_stamp +%y%m%d_%H%M%S)"
    local dst_dtime="$(date --date=@$dst_stamp +%y%m%d_%H%M%S)"
    uid="$(stat -Lc %u "$dst")" gid="$(stat -Lc %g "$dst")" mode="$(stat -Lc %a "$dst")"
    chown "$uid" "$src" || true
    chgrp "$gid" "$src" || true
    chmod "$mode" "$src" || true
    if test -L "$dst";then
      new_tgt="$dst.$src_stamp"
      echo -n "Re-linking $dst ($dst_dtime) to ${new_tgt##*/} ($src_dtime) .. "
      mv "$src" "$new_tgt"
      mv "$dst" "$dst.OLD.$(date +%s)"
      ln -s "${new_tgt##*/}" "$dst"
      echo "Done."
    else
      echo -n "Replacing $dst ($dst_dtime) with new version ($src_dtime).. "
      mv "$dst" "$dst.OLD.$(date +%s)"
      mv "$src" "$dst"
      echo "Done."
    fi
  else
    mv -v "$src" "$dst"
  fi
}

find_iname() {
    local name="$1" IFS_save="$IFS" f n ret=""
    IFS="/"
    for n in $name; do
        test -n "$n" || { ret="$ret/"; continue; }
        test -d "${ret:-.}" && f="$(find "${ret:-.}" -mindepth 1 -maxdepth 1 -iname "$n" -printf "%f"| head -1)" || f=""
        ret="$ret${f:-$n}/"
    done
    IFS="$IFS_save"
    echo "${ret%/}$(test -n "${name%%*/}" || echo /)"
}

install_grub_efi() {
  local target_dir="$1" efi_arch="${2:-x86_64-efi}" efi_image="bootx64.efi"
  local efi_mods="${3:-configfile ext2 fat part_gpt part_msdos normal linux ls boot echo reboot search search_fs_file search_fs_uuid search_label help ntfs ntfscomp hfsplus chain multiboot terminal lspci font efi_gop efi_uga gfxterm}"

  test -d "/usr/lib/grub/$efi_arch" || return 0
  efi_dir="$(find_iname "$target_dir/EFI/Boot")"
  boot_dir="$(find_iname "$target_dir/boot/grub")"
  test ! -e "$efi_dest/$efi_image" || return 0
  mkdir -p "$efi_dir" "$boot_dir"
  grub-mkimage -o "$efi_dir/$efi_image" -O "$efi_arch" -p "${boot_dir#$target_dir}" $efi_mods
  cp -r "/usr/lib/grub/$efi_arch" "$boot_dir"
  echo "source /grub.cfg" >"$boot_dir/$efi_arch/grub.cfg"
}

find_apt_fullpath() {
  local key="$1" ret=""
  while true;do
    case "$ret" in
      /*) echo "$ret"; break;;
      *)
        ret="$(apt-config dump "$key" --format=%v%n | head -1)${ret:+/$ret}"
        key="${key%::*}"
      ;;
    esac
  done
}

rebuild_sfs() {
  local src_dir="$1" orig="$2" out="$3" outfile x of build_tmp
  test -d "$src_dir" || {
    echo "Usage: $FUNCNAME <source_dir> <orig_sfs> [<out_sfs> [<mksquashfs_opts>]]" >&2
    return 1
  }
  test "$#" -le 3 && shift $# || shift 3

  while true;do
    outfile="${out:-$orig.NEW.`date +%s`}"
    case "$(mnt2dev "$(file2mnt "$outfile")" 3)" in
      cifs)
        build_tmp="$(mktemp)"
        mksquashfs "$src_dir" "$build_tmp" -noappend "$@";
        mv -v "$build_tmp" "$outfile"
      ;;
      *) mksquashfs "$src_dir" "$outfile" "$@";;
    esac
    sync
    if unsquashfs -l "$outfile" / >/dev/null;then break;fi
    echo -n 'Build failed!!! Press Enter to try again..' >&2
    read x
  done
  test ! -e "$orig" || {
    chown "$(stat -c %u:%g "$(readlink -f "$orig")")" "$outfile" || true
    chmod "$(stat -c %a "$(readlink -f "$orig")")" "$outfile" || true
  }

  test -n "$out" || replace_sfs "$outfile" "$orig"
}

link_deep() {
  local src="$1" dst="$2" IFS_save="$IFS" f dst_f
  IFS="
"
  for f in $(find "$src" -mindepth 1 -maxdepth 1);do
    dst_f="$dst/${f##*/}"
    if test -e "$dst_f";then
      if test ! -L "$dst_f" -a -d "$dst_f" -a -d "$f";then
        link_deep "$f" "$dst_f"
      fi
    else
      test -L "$dst_f" || ln -vs "$(readlink -f "$f")" "$dst"
    fi
  done
  IFS="$IFS_save"
}

cat_file() {
  test -n "$1" || { echo "Usage: cat_file <url_or_file>" >&2; return 1; }
  case "$1" in
    http://*|https://*|ftp://*) curl -L -f "$1";;
    *)
      if test -x "$(which bar)";then
        bar -ns -ti "${1##*/}" -s $(stat -Lc %s "$1") -if "$1"
      else 
        echo -n "Getting ${1##*/}.." >&2;cat "$1";echo >&2
      fi
    ;;
  esac
}

: ${dl_cache_dir:=$HOME/.cache/lbu/dl}

dl_file() {
  local url="$1"
  local cached_file="${cached_file:-$dl_cache_dir/$(echo -n "$url" | md5sum | cut -c1-8)-$(basename "${url%.git}")}" git_branch="$git_branch"
  case "$url" in *.git|git://*|git+*)
    case "$url" in git+*) url="${url#git+}";;esac
    case "$url" in *#*) git_branch="${url##*#}"; url="${url%#$git_branch}"; cached_file="${cached_file%#$git_branch}";; esac
    test -z "$git_branch" || cached_file="${cached_file}@${git_branch}"
    test -d "$cached_file" && ( cd "$cached_file"; git pull --recurse-submodules "$url" ${git_branch:+$git_branch} && git submodule update --depth 1) >&2 ||
      git clone --recurse-submodules ${git_branch:+-b $git_branch} --depth=1 "$url" "$cached_file" >&2
  ;;
  *)
  test -s "$cached_file" || {
    mkdir -p "${cached_file%/*}"
    wget -O "${cached_file}.dl-tmp.$$" "$url" >&2 || return 1
    mv "${cached_file}.dl-tmp.$$" "$cached_file"
  }
  ;; esac
  echo "$cached_file"
}

dl_compile_and_install() {
  local do_patch
  test ! "x$1" = "x--patch" || { do_patch=1; shift ; }
  local src="$1" prefix="$2"  dest="$3" src_name="$4"
  local src_file src_dir src_name
  test -n "$src_name" || {
    src_name="${src##*/}"
    while true; do 
      case "$src_name" in
       *.tar|*.gz|*.bz2|*.tbz2|*.tbz|*.xz|*.zip|*.7z) src_name="${src_name%.*}" ;;
       *) break;;
      esac
    done
  }
  test -n "$src" -a -n "$prefix" || {
    echo "Usage: $FUNCNAME <src=$src> <prefix=$prefix> [<dest=$dest>] [<src_name=$src_name>] [configure_args..]" >&2
    return 1
  }
  if test "$#" -gt 4 ;then shift 4 ; else shift $#;fi
  if test -d "$src";then src_dir="$src"
  else src_dir="$HOME/.cache/lbu-compile/$(echo -n "$src" | md5sum | cut -c1-8)-${src_name}-src"
  fi
  if test -d "$src_dir";then
    test -z "$do_patch" || cat >/dev/null
  else
    case "$src" in
      git://*|https://*/*.git|http://*/*.git)
        git clone "$src" "$src_dir"
      ;;
      http://*|https://*|ftp://*)
        local src_file="$(dl_file "$src")"
        src="$(readlink -f "$src_file")"
      ;;
    esac
    mkdir -p "$src_dir"
    case "$src" in 
      *.tar.gz|*.tgz) gzip -dc <"$src" | (cd "$src_dir"; tar xv --strip-components=1) || return 1;;
      *.tar.bz2|*.tbz2|*.tbz) bzip2 -dc <"$src" | (cd "$src_dir"; tar xv --strip-components=1) || return 1;;
      *.tar.xz) xz -dc <"$src" | (cd "$src_dir"; tar xv --strip-components=1) || return 1;;
      *.zip) unzip "$src" -d "$src_dir" || return 1;;
      *.7z) 7z -o"$src_dir" "$src" || return 1;;
    esac
    test -z "$do_patch" || (cd "$src_dir"; patch -p1)
  fi
  local inst_dest="$(mktemp -d /tmp/inst-${src_name}.XXXXXX)"
  if test -e "$src_dir/bootstrap.sh" -a ! -x "$src_dir/configure";then
    (cd "$src_dir" ; sh bootstrap.sh ) || return 1
  elif test -e "$src_dir/autogen.sh" -a ! -x "$src_dir/configure";then
    (cd "$src_dir" ; sh autogen.sh ) || return 1
  elif test -e "$src_dir/configure.ac" -a ! -x "$src_dir/configure";then
    (cd "$src_dir" ; autoreconf -i ) || return 1
  fi
  if test -x "$src_dir"/configure;then
    (
      cd "$src_dir"
      CPPFLAGS="-I$prefix/include" LDFLAGS="-Wl,-rpath=$prefix/lib -L$prefix/lib" ./configure --prefix="$prefix" "$@" $configure_args && make $make_flags && make install DESTDIR="$inst_dest"
    ) || return 1
  elif test -e "$src_dir"/setup.py;then
    (
      cd "$src_dir"
      CPPFLAGS="-I$prefix/include" LDFLAGS="-Wl,-rpath=$prefix/lib -L$prefix/lib" python setup.py install --prefix="$prefix" --root="$inst_dest" "$@" $setup_args
    ) || return 1
  else
    echo "Don't know how to compile $src_dir" >&2
    rm -r "$inst_dest"
    return 1
  fi
  echo "As root: (cd $inst_dest ; tar c --owner=root --group=root * | tar xvv -C \"${dest:-\$DESTDIR}\") && rm -r $inst_dest" >&2
  test -z "$dest" || {
    (cd "$inst_dest" ; tar c --owner=root --group=root * | as_root tar xvv -C "$dest") && rm -r "$inst_dest"
  }
}

if test -n "$DISPLAY" && xlsclients >/dev/null && test -x "$(which zenity)";then
  show_info() { zenity --info --text="$1"; }
  ask_yesno() { zenity --question --text="$1" ; }
  ask_text() { zenity --entry --text="$1" ${2:+--entry-text="$2"}; }
  ask_passwd() { zenity --password --title="$1"; }
  confirm_text() {
    local msg="$1" need="$2"
    answ="$(ask_text "$msg. Enter [$need] to confirm.")"
    if test "x$need" = "x$answ"; then return 0; else show_info "Aborted"; return 1;fi
  }
  select_one() {
    local msg="$1" x extra_cols
    shift
    while test "x$1" = "x-c";do
      extra_cols="${extra_cols:+$extra_cols }--column $2"
      shift 2
    done
    for x;do echo "$x" ; done | zenity --list --text="$msg" --column Select $extra_cols
  }
else
  tty -s || echo "$0: Warning: X11 failed, input is not terminal, UI input might fail" >&2
  ask_passwd() {
    local _st
    stty -echo >&2
    ask_text "$@" ; _st="$?"
    stty echo >&2
    return $_st
  }
  show_info() { 
    local answ
    echo "$1" >&2
    echo -n "Press Enter to continue." >&2
    read answ
  }
  ask_yesno() {
    local msg="$1" answ
    echo -n "$msg? [y/n] " >&2
    read answ
    case "$answ" in Y*|y*) return 0;; *) return 1;; esac
  }
  ask_text() {
    local msg="$1" def="$2" answ
    echo "$msg${def:+ [default: $def]}" >&2
    echo -n "> " >&2
    read answ || return 1
    echo "${answ:-$def}"
  }
  confirm_text() {
    local msg="$1" need="$2" answ
    echo "$msg" >&2
    echo -n "Enter [$need] to confirm: " >&2
    read answ
    if test "x$need" = "x$answ"; then return 0; else show_info "Aborted"; return 1;fi
  }
  select_one() {
    local msg="$1" x colcount=1 i=0 answ
    shift
    while test "x$1" = "x-c";do
      colcount="$((colcount+1))"
      extra_cols="${extra_cols:+$extra_cols }--column $2"
      shift 2
    done
    echo "Select 1 from:" >&2
    for x;do
      echo -n "$x" >&2
      i="$(($i+1))"
      if test "$(($i%$colcount))" = "0";then
        echo >&2
      else
        echo -n " " >&2
      fi
    done
    echo -n "> " >&2
    read answ || return 1
    echo "$answ"
  }
fi
